#!/usr/bin/env ruby

require 'gli'
require 'readline'

begin # XXX: Remove this begin/rescue before distributing your app
require 'rb_tags'
self.extend RbTags
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/rb_tags` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/rb_tags now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version RbTags::VERSION

subcommand_option_handling :normal
arguments :strict

# # global options
# desc 'Describe some switch here'
# switch [:s,:switch]
#
# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'tags a given directory'
command :tag do |c|
  # switches
  c.desc 'tag also bundled gems'
  c.switch [:gems], :default_value => false

  c.action do |global_options,options,args|
    generate(options)
  end
end

desc 'show esisting tags'
command :show do |c|
  c.action do |global_options,options,args|
    show
  end
end

desc 'search for a tag'
command :find do |c|
  c.action do |global_options,options,args|
    find
    ap @found
    $stdout.print "open [#{(0 ... @found.length).to_a.join(',')}]: ".green
    what = ''
    while (what += $stdin.getch) !~ /(\w\s)/
      $stdout.print "#{what}".blue
    end
    open what
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

# list = self.commands.keys.collect { |x| x.to_s }
# args = complete(list)
exit run(ARGV)
